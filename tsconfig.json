{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2020",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
// 2019-07-12T04:05:08 – xEwviyQ1HYwsLMsu64nz
// 2019-08-20T09:38:18 – I4ocmcEQRg3HUzamrO8g
// 2019-09-08T05:45:55 – rdxgJjc44n9EbxIgUmEX
// 2019-09-14T22:43:11 – kOToZydp0TIUgdm5sjzt
// 2019-10-02T23:23:22 – lQjd0YB53wDn2iorlaEO
// 2019-10-23T00:07:48 – plwhQiDzQtJF6hJV5G3v
// 2019-10-31T22:42:14 – eeuZ0HfzAJ6V4QvwHeUn
// 2019-11-02T18:57:14 – TvkKUOjMtRvMMs8gOk64
// 2019-11-09T08:35:20 – AXkT48z0sZ0fkIIzNI1B
// 2019-11-15T12:54:31 – tWgZ6UZ6jZdOLCGghrLn
// 2019-11-21T03:19:16 – 65DrfQXPVc4pUGBGrkKf
// 2019-11-25T13:01:30 – deOEbrxyixqUCxG3lFCv
// 2019-11-28T10:09:02 – nKweQL0kuXgG8lZ7GgEc
// 2019-12-16T05:45:43 – IsRunsrQKEKOuyuOkKPt
// 2020-01-03T01:02:58 – HJcwecbNNJqXotFrT1i7
// 2020-01-26T17:41:08 – KwFFo3MzSpk6xdbaNRGS
// 2020-02-22T08:10:26 – MQ87HWf5ZsIVxDEw3xG1
// 2020-03-19T12:13:45 – n9a3muW1ho2BJnFEOU9W
// 2020-04-12T09:52:44 – Q8NBB4lHzBaVLPRnQZjj
// 2020-04-13T09:01:45 – CtSH7PAGRxP49LgOG0gi
// 2020-04-23T12:49:06 – RtDslDczO3PvvZpigCdN
// 2020-04-28T18:01:01 – qy4uaiaFfz98L28jc2WZ
// 2020-05-03T19:12:05 – p3GYn08aKO4tSy0mFQ9e
// 2020-05-07T14:15:30 – GtXBLZ71e5GaKA2ZZ8QK
// 2020-05-10T21:01:48 – hGJz4D0UPvukoJqed4oc
// 2020-05-12T19:09:46 – GnGv58KFpNIDiNdlEWHS
// 2020-06-16T21:01:21 – FLWnCDDnXG4X5wMuldeH
// 2020-06-17T04:55:20 – wZVDDTgUQmjVM6rrTuuk
// 2020-06-26T13:47:46 – QIjt5mqxWzf3SoK40cIq
// 2020-06-26T14:50:42 – UqJbQowHWRQAM1ToUfDV
// 2020-07-10T09:12:52 – xkcFs1O96xgRMz94rM7h
// 2020-07-21T18:15:54 – Y3PqTcBgYcqEQrJ9Ixo7
// 2020-07-26T02:18:42 – ENZJDVZL0wAbx8TSSspZ
// 2020-08-01T13:17:27 – cIyqoTRlHD9IIntnEkvh
// 2020-08-24T11:36:02 – D7kPQwzSkg6OcJTyu5YV
// 2020-08-28T02:08:05 – fy52Dinc4MJAzYUdfUV1
// 2020-08-31T10:01:23 – 9wJPceEPf5LdrtHe84NU
// 2020-09-12T05:29:25 – pFCZtgUtK2sgyKzAO8Zx
// 2020-09-13T01:53:36 – zNX2e65inYfXcWObSGuE
// 2020-09-21T19:51:52 – cnzGkynedfYspcdgeqbo
// 2020-09-27T03:53:14 – stZ08zc1RxTwAvLRy7ax
// 2020-10-04T06:39:40 – sgVTSQpT74MuUK1ABFJt
// 2020-10-24T21:25:27 – rWP0aqCPg5xtY9T2DjsZ
// 2020-10-25T14:16:00 – GuJOKcf9bJ7vF9Qlm8sz
// 2020-10-29T17:34:25 – xPjlNOTUrvNRCJB0lMZF
// 2020-11-01T01:52:32 – 30fGthIMOMYgTLpSbQCV
// 2020-11-08T15:07:03 – w1MyNAfhYViuPOMiPDfp
// 2020-11-10T23:48:04 – kKCmgBZgxElq7NLoLxXk
// 2020-11-12T15:28:56 – 9jXcML6Y5nGnbvs6kokE
// 2020-11-14T06:55:28 – GRik8v3rn8H0fTp0JcCu
// 2020-12-10T03:35:48 – LGGY5mL1ZoQZqqqsklWl
// 2020-12-20T06:08:27 – qDm48Tjg5RKOUt5z2dXx
// 2020-12-26T23:32:02 – Wqv2TAxNxW7kSLGzykig
// 2020-12-27T02:55:19 – MaHGVn0RFPdJX403eu8P
// 2020-12-30T02:05:39 – kNKKfagDU3jKvHxWqqE7
// 2020-12-31T14:32:41 – xaCMBO2ojgp4irznP6pH
// 2021-01-02T07:36:27 – JCxIclj10fNd7Aoyl60k
// 2021-01-30T19:18:39 – PQLwIZaLZ7mSO5FoY8ML
// 2021-02-01T13:13:31 – fFXjvv2o0EaCiSqCKUjG
// 2021-02-08T07:39:43 – qW1Inx33U6IDs9jt0I2B
// 2021-02-11T03:19:30 – bk2EROjuDHknpThCqLjq
// 2021-03-03T16:22:03 – EflZpZ8nwzRnAeXIX6BO
// 2021-03-10T21:43:04 – 2DKrkN5rdeg0LS4dFrqr
// 2021-03-20T20:19:06 – 8zxRlQOE54tFDpZe9YGg
// 2021-03-22T10:38:55 – opufC5eUFkRrWj2AWGSY
// 2021-03-25T02:39:22 – JV49jqXoIdoqm3cED5fn
// 2021-04-01T08:16:58 – 5VLHC2nldYHZ2ox0KQ0n
// 2021-04-29T22:11:52 – HcV7o6CxDz91WS896FyF
// 2021-05-07T09:03:28 – evyAa6tYfpt56rywaqri
// 2021-05-14T03:45:45 – vkiYzl9FLLDW6wuQZqJ9
// 2021-05-26T20:15:10 – unoci6I3cv7XYPVclYMU
// 2021-06-05T10:48:26 – t3wNXPROYDXcytk5RezL
// 2021-06-15T09:03:21 – EyFamGbLlVeAAD3BK85x
// 2021-07-03T11:42:16 – QX60LQNJ4lw4kscnIMDN
// 2021-07-14T22:32:05 – 6IdbmGbWvW6jD2fafBBd
// 2021-07-28T16:37:05 – RsgsnZADN2uCy8xGKeJb
// 2021-07-30T13:57:23 – wAZdq7HVKy4JNPpQt7nO
// 2021-08-24T14:16:58 – Gc2AKTKZVmksRY94OR3G
// 2021-08-30T16:45:02 – 0hi4SiOHDcOU3KSrHqg4
// 2021-10-12T05:46:34 – 0PfICNpEGwSXZUv9MNkz
// 2021-10-13T21:01:22 – SCslw88K43lCUlz9rMLs
// 2021-10-16T19:07:43 – ts9BRbkqKNdpIh8Hf9aL
// 2021-10-27T07:25:23 – wUhVFcT9G8XgW0G7tSGC
// 2021-11-17T23:20:14 – 6wQKcsJWCOhB3QkoU5Sp
// 2021-12-01T12:27:00 – Wr1RIAM3tZJUjVp3c4AJ
// 2021-12-09T11:09:54 – MQUhmm3zrHcERfVCU2MI
// 2021-12-13T11:45:04 – FwLTQV7bjNPw1w7Hgnys
// 2021-12-15T05:16:38 – RTI46AwKTHQLo9V9dxLg
// 2021-12-16T22:00:21 – VxNlDHA7Gs4nYivVLQYW
// 2021-12-17T20:32:27 – Lr9TiRfgNDhJCRi5VjuD
// 2022-01-25T03:16:52 – 4yR6x4U1cefDS7xH5oPo
// 2022-02-02T21:35:25 – EMtmuRWH0CIujAO5D9xe
// 2022-02-19T07:12:39 – NFBveBRiJcJIGwFN73LQ
// 2022-02-21T14:15:36 – xjXR6JXBdsHW3gpQXtBh
// 2022-03-25T17:50:24 – wdglNyzUUCQKDXNpgzIV
// 2022-04-23T20:47:24 – hTPF9oiPSJ6UF59kuWaR
// 2022-04-27T22:07:25 – 32fiYQ6USoJSeAZbIv0H
// 2022-05-08T15:25:20 – 2d8Y27ZA7injCOVlIwsz
// 2022-05-22T08:53:53 – 1nOmBB0udn8v9tacBlIb
// 2022-06-05T10:03:05 – qjIAEbwfzUsRaN6MfvCj
// 2022-06-10T01:37:22 – HBsXZy78wmNU9t4ka57A
// 2022-06-11T01:50:23 – NOqles3onoIivHAkdVWl
// 2022-06-28T19:48:19 – GfHHTNqDUd5bq2jZHzL7
// 2022-06-30T07:57:44 – SXnWmMvWvJxYNbtvpgNM
// 2022-09-13T18:53:36 – 6i4KZJnstb8Kn1H7QPSA
// 2022-09-19T19:28:02 – hsOAkLdSZMqWIDRsE5Mc
// 2022-11-09T11:58:06 – 6V2kPzrrWojv62ZguVrl
// 2022-11-20T23:00:10 – bQlxumLHvWEaB6FDXtaX
// 2022-11-28T04:39:43 – PRuvXrl9UI2BZaWfn1Z7
// 2022-12-02T01:50:51 – Xlq6WztT3RF8FZvUjrMY
// 2022-12-08T17:48:39 – Fhcyk5VH4MvNLupo65z5
// 2022-12-27T03:53:50 – VFkiJO9rGi9VM1AGHH9n
// 2023-01-02T21:44:42 – xgK0A9yNRIotvtmvwy5S
// 2023-01-28T17:06:00 – E95VGksl9wsDz5NkBrot
// 2023-02-08T17:55:27 – wRg7jMVzImrpUJMmJMxp
// 2023-02-21T01:10:35 – 8f8MqIIc3jt5t5ROOZCS
// 2023-02-25T10:38:40 – uHxFTsL4z6xt3YosXHAZ
// 2023-02-28T13:17:10 – IGxudFkFdlFnsA1ToO1I
// 2023-03-22T22:12:17 – aElVOhQUKMzbjk2QyeQm
